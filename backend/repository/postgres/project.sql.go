// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: project.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO project (id, title, sector, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, title, sector, created_at, updated_at, deleted_at
`

type CreateProjectParams struct {
	ID     pgtype.UUID
	Title  string
	Sector string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.ID, arg.Title, arg.Sector)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Sector,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createProjectAssignment = `-- name: CreateProjectAssignment :one
INSERT INTO project_account_assignment (id, project_id, account_id, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, project_id, account_id, created_at, updated_at, deleted_at
`

type CreateProjectAssignmentParams struct {
	ID        pgtype.UUID
	ProjectID pgtype.UUID
	AccountID pgtype.UUID
}

func (q *Queries) CreateProjectAssignment(ctx context.Context, arg CreateProjectAssignmentParams) (ProjectAccountAssignment, error) {
	row := q.db.QueryRow(ctx, createProjectAssignment, arg.ID, arg.ProjectID, arg.AccountID)
	var i ProjectAccountAssignment
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
UPDATE project
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const deleteProjectAssignment = `-- name: DeleteProjectAssignment :exec
UPDATE project_account_assignment
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteProjectAssignment(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProjectAssignment, id)
	return err
}

const getAssignedProjectsByUserEmail = `-- name: GetAssignedProjectsByUserEmail :many
SELECT
  p.id, p.title, p.sector, p.created_at, p.updated_at, p.deleted_at
FROM project p
JOIN project_account_assignment paa
    ON p.id = paa.project_id
JOIN account a
    ON paa.account_id = a.id
WHERE a.email = $1 AND p.deleted_at IS NULL
`

func (q *Queries) GetAssignedProjectsByUserEmail(ctx context.Context, email string) ([]Project, error) {
	rows, err := q.db.Query(ctx, getAssignedProjectsByUserEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Sector,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectMembersFromProjectId = `-- name: GetProjectMembersFromProjectId :many
SELECT
  a.email
  , a.username
FROM project_account_assignment paa
JOIN account a
    ON paa.account_id = a.id
WHERE paa.project_id = $1
`

type GetProjectMembersFromProjectIdRow struct {
	Email    string
	Username string
}

func (q *Queries) GetProjectMembersFromProjectId(ctx context.Context, projectID pgtype.UUID) ([]GetProjectMembersFromProjectIdRow, error) {
	rows, err := q.db.Query(ctx, getProjectMembersFromProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectMembersFromProjectIdRow
	for rows.Next() {
		var i GetProjectMembersFromProjectIdRow
		if err := rows.Scan(&i.Email, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjects = `-- name: GetProjects :many
SELECT id, title, sector, created_at, updated_at, deleted_at
FROM project
WHERE deleted_at IS NULL
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Sector,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE project
SET title = $1, sector = $2, updated_at = NOW()
WHERE id = $3
RETURNING id, title, sector, created_at, updated_at, deleted_at
`

type UpdateProjectParams struct {
	Title  string
	Sector string
	ID     pgtype.UUID
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject, arg.Title, arg.Sector, arg.ID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Sector,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
