// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE username = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteAccount, username)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, email, created_at, updated_at, deleted_at FROM account
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertAccount = `-- name: InsertAccount :one
INSERT INTO account (
  username, email
) VALUES (
  $1, $2
)
RETURNING id, username, email, created_at, updated_at, deleted_at
`

type InsertAccountParams struct {
	Username string
	Email    string
}

func (q *Queries) InsertAccount(ctx context.Context, arg InsertAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, insertAccount, arg.Username, arg.Email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertAccountInfo = `-- name: InsertAccountInfo :one
INSERT INTO account_information (
  id, display_name, favorite_number, homeworld_realm, account_id
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, display_name, favorite_number, homeworld_realm, created_at, updated_at, deleted_at, account_id
`

type InsertAccountInfoParams struct {
	ID             pgtype.UUID
	DisplayName    string
	FavoriteNumber pgtype.Int4
	HomeworldRealm pgtype.Text
	AccountID      pgtype.UUID
}

func (q *Queries) InsertAccountInfo(ctx context.Context, arg InsertAccountInfoParams) (AccountInformation, error) {
	row := q.db.QueryRow(ctx, insertAccountInfo,
		arg.ID,
		arg.DisplayName,
		arg.FavoriteNumber,
		arg.HomeworldRealm,
		arg.AccountID,
	)
	var i AccountInformation
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.FavoriteNumber,
		&i.HomeworldRealm,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AccountID,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, username, email, created_at, updated_at, deleted_at FROM account
ORDER BY username
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account
  set email = $2
WHERE username = $1
RETURNING id, username, email, created_at, updated_at, deleted_at
`

type UpdateAccountParams struct {
	Username string
	Email    string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.Username, arg.Email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
