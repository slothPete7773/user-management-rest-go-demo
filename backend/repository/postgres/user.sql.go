// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE account
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const deleteAccountInfo = `-- name: DeleteAccountInfo :exec
UPDATE account_information
SET deleted_at = NOW()
WHERE account_id = $1
`

func (q *Queries) DeleteAccountInfo(ctx context.Context, accountID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccountInfo, accountID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT a.id, username, email, a.created_at, a.updated_at, a.deleted_at, ai.id, display_name, favorite_number, homeworld_realm, ai.created_at, ai.updated_at, ai.deleted_at, account_id FROM account AS a
JOIN account_information AS ai
  ON a.id = ai.account_id
WHERE username = $1 LIMIT 1
`

type GetAccountRow struct {
	ID             pgtype.UUID
	Username       string
	Email          string
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	DeletedAt      pgtype.Timestamp
	ID_2           pgtype.UUID
	DisplayName    string
	FavoriteNumber pgtype.Int4
	HomeworldRealm pgtype.Text
	CreatedAt_2    pgtype.Timestamp
	UpdatedAt_2    pgtype.Timestamp
	DeletedAt_2    pgtype.Timestamp
	AccountID      pgtype.UUID
}

func (q *Queries) GetAccount(ctx context.Context, username string) (GetAccountRow, error) {
	row := q.db.QueryRow(ctx, getAccount, username)
	var i GetAccountRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID_2,
		&i.DisplayName,
		&i.FavoriteNumber,
		&i.HomeworldRealm,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
		&i.AccountID,
	)
	return i, err
}

const getAccountInfoByEmail = `-- name: GetAccountInfoByEmail :one
SELECT a.id, username, email, a.created_at, a.updated_at, a.deleted_at, ai.id, display_name, favorite_number, homeworld_realm, ai.created_at, ai.updated_at, ai.deleted_at, account_id FROM account AS a
JOIN account_information AS ai
  ON a.id = ai.account_id
WHERE email = $1 LIMIT 1
`

type GetAccountInfoByEmailRow struct {
	ID             pgtype.UUID
	Username       string
	Email          string
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	DeletedAt      pgtype.Timestamp
	ID_2           pgtype.UUID
	DisplayName    string
	FavoriteNumber pgtype.Int4
	HomeworldRealm pgtype.Text
	CreatedAt_2    pgtype.Timestamp
	UpdatedAt_2    pgtype.Timestamp
	DeletedAt_2    pgtype.Timestamp
	AccountID      pgtype.UUID
}

func (q *Queries) GetAccountInfoByEmail(ctx context.Context, email string) (GetAccountInfoByEmailRow, error) {
	row := q.db.QueryRow(ctx, getAccountInfoByEmail, email)
	var i GetAccountInfoByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID_2,
		&i.DisplayName,
		&i.FavoriteNumber,
		&i.HomeworldRealm,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
		&i.AccountID,
	)
	return i, err
}

const insertAccount = `-- name: InsertAccount :one
INSERT INTO account (
  id, username, email, created_at, updated_at
)
VALUES (
  $1, $2, $3, NOW(), NOW()
)
RETURNING id, username, email, created_at, updated_at, deleted_at
`

type InsertAccountParams struct {
	ID       pgtype.UUID
	Username string
	Email    string
}

func (q *Queries) InsertAccount(ctx context.Context, arg InsertAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, insertAccount, arg.ID, arg.Username, arg.Email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertAccountInfo = `-- name: InsertAccountInfo :one
INSERT INTO account_information (
  id
  , display_name
  , favorite_number
  , homeworld_realm
  , account_id
  , created_at
  , updated_at
) VALUES (
  $1, $2, $3, $4, $5, NOW(), NOW()
)
RETURNING id, display_name, favorite_number, homeworld_realm, created_at, updated_at, deleted_at, account_id
`

type InsertAccountInfoParams struct {
	ID             pgtype.UUID
	DisplayName    string
	FavoriteNumber pgtype.Int4
	HomeworldRealm pgtype.Text
	AccountID      pgtype.UUID
}

func (q *Queries) InsertAccountInfo(ctx context.Context, arg InsertAccountInfoParams) (AccountInformation, error) {
	row := q.db.QueryRow(ctx, insertAccountInfo,
		arg.ID,
		arg.DisplayName,
		arg.FavoriteNumber,
		arg.HomeworldRealm,
		arg.AccountID,
	)
	var i AccountInformation
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.FavoriteNumber,
		&i.HomeworldRealm,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AccountID,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT a.id, username, email, a.created_at, a.updated_at, a.deleted_at, ai.id, display_name, favorite_number, homeworld_realm, ai.created_at, ai.updated_at, ai.deleted_at, account_id FROM account AS a
JOIN account_information AS ai
  ON a.id = ai.account_id
ORDER BY username
`

type ListAccountsRow struct {
	ID             pgtype.UUID
	Username       string
	Email          string
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	DeletedAt      pgtype.Timestamp
	ID_2           pgtype.UUID
	DisplayName    string
	FavoriteNumber pgtype.Int4
	HomeworldRealm pgtype.Text
	CreatedAt_2    pgtype.Timestamp
	UpdatedAt_2    pgtype.Timestamp
	DeletedAt_2    pgtype.Timestamp
	AccountID      pgtype.UUID
}

func (q *Queries) ListAccounts(ctx context.Context) ([]ListAccountsRow, error) {
	rows, err := q.db.Query(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAccountsRow
	for rows.Next() {
		var i ListAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.DisplayName,
			&i.FavoriteNumber,
			&i.HomeworldRealm,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account
  set
    username = $2,
    email = $3
WHERE id = $1
RETURNING id, username, email, created_at, updated_at, deleted_at
`

type UpdateAccountParams struct {
	ID       pgtype.UUID
	Username string
	Email    string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.ID, arg.Username, arg.Email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateAccountInfo = `-- name: UpdateAccountInfo :one
UPDATE account_information
SET
  display_name = $1
  , favorite_number = $2
  , homeworld_realm = $3
  , updated_at = NOW()
WHERE account_id = $4
RETURNING id, display_name, favorite_number, homeworld_realm, created_at, updated_at, deleted_at, account_id
`

type UpdateAccountInfoParams struct {
	DisplayName    string
	FavoriteNumber pgtype.Int4
	HomeworldRealm pgtype.Text
	AccountID      pgtype.UUID
}

func (q *Queries) UpdateAccountInfo(ctx context.Context, arg UpdateAccountInfoParams) (AccountInformation, error) {
	row := q.db.QueryRow(ctx, updateAccountInfo,
		arg.DisplayName,
		arg.FavoriteNumber,
		arg.HomeworldRealm,
		arg.AccountID,
	)
	var i AccountInformation
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.FavoriteNumber,
		&i.HomeworldRealm,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AccountID,
	)
	return i, err
}
